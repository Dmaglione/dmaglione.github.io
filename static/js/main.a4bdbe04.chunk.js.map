{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","console","log","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","Playlist","handleNameChange","onNameChange","defaultValue","PlaylistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris","App","PlaylistName","updatePlaylistName","find","isSaved","push","filter","currentTrack","newname","playlistTracks","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4bdbe04.chunk.js","sourcesContent":["\nconst clientId='1a5dfb4e206b48a9bab96442cb95f394';\nconst redirectUri='http://jamz.surge.sh';\nlet accessToken;\n\nconst Spotify={\n\tgetAccessToken(){\n\t\tif(accessToken){\n\t\t\treturn accessToken;\n\t\t}\n\t\tconst accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);\n\t\tconst expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);\n\t\tif(accessTokenMatch && expiresInMatch){\n\t\t\taccessToken=accessTokenMatch[1];\n\t\t\tconst expiresIn= Number(expiresInMatch[1]);\n\n\t\t\twindow.setTimeout(() => accessToken = '', expiresIn * 1000);\n\t\t\twindow.history.pushState('Access Token', null, '/');\n\t\t\treturn accessToken;\n\t\t} else {\n\t\t\tconst accessUrl=`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n\t\t\twindow.location=accessUrl;\n\t\t}\n\t},\n\tsearch(term){\n\t\tconst accessToken=Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n\t\t\t{headers:{\n\t\t\t\tAuthorization:`Bearer ${accessToken}`\n\t\t\t}\n\t\t}).then(response=>\n\t\t\t response.json()\n\t\t).then(jsonResponse => {\n\t\t\tif(!jsonResponse.tracks){\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t\treturn jsonResponse.tracks.items.map(track=>({\n\t\t\t\t\tid:track.id,\n\t\t\t\t\tname:track.name,\n\t\t\t\t\tartist:track.artists[0].name,\n\t\t\t\t\talbum:track.album.name,\n\t\t\t\t\turi:track.uri\n\t\t\t\t}));\n\t\t\t\n\t\t})\n\t},\n\tsavePlaylist(name,trackUris){\n\t\tif(!name || !trackUris){\n\t\t\tconsole.log('this should not trigger')\n\t\t\treturn;\n\t\t}\n\t\tconst accessToken=Spotify.getAccessToken();\n\t\tconst headers={\n\t\t\tAuthorization:`Bearer ${accessToken}`\n\t\t};\n\t\tlet userId;\n\t\treturn fetch(`https://api.spotify.com/v1/me`,{headers:headers}).then(\n\t\t\tresponse=> response.json())\n\t\t.then(jsonResponse=> {\n\t\t\t\tuserId=jsonResponse.id;\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n\t\t\t\t\t{headers:headers,\n\t\t\t\t\t\tmethod:'POST',\n\t\t\t\t\t\tbody:JSON.stringify({name:name})}\n\t\t\t\t\t\t).then(response=>response.json()\n\t\t\t\t\t\t).then(jsonResponse=>{\n\t\t\t\t\t\t\tconsole.log('this should trigger');\n\t\t\t\t\t\t\tconst playlistId=jsonResponse.id;\n\t\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\theaders:headers,\n\t\t\t\t\t\t\t\t\tmethod:'POST',\n\t\t\t\t\t\t\t\t\tbody:JSON.stringify({uris:trackUris})\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\t\t\t\t\t\t\n\t\t\t});\n\t}\n\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tterm:''\n\t\t};\n\t\tthis.search=this.search.bind(this);\n\t\tthis.handleTermChange=this.handleTermChange.bind(this);\n\t}\n\tsearch(){\n\t\tthis.props.onSearch(this.state.term);\t\n\t}\n\thandleTermChange(e){\n\t\tthis.setState({term:e.target.value});\n\t}\n\trender(){\n\treturn (\n\t  <div className=\"SearchBar\">\n\t  <input onChange={this.handleTermChange} \n\t  \t\tplaceholder=\"Enter A Song, Album, or Artist\" />\n\t  <button onClick={this.search}className=\"SearchButton\">SEARCH</button>\n\t</div>)\n\t}\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css'\n\nclass Track extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.addTrack=this.addTrack.bind(this);\n\t\tthis.removeTrack=this.removeTrack.bind(this);\n\t}\n\trenderAction(){\n\t\tif(this.props.isRemoval){\n\t\t\treturn <button className='Track-action' onClick={this.removeTrack}>-</button>\n\t\t} else {\n\t\t\treturn <button className='Track-action' onClick={this.addTrack}>+</button>\n\t\t}\n\t}\n\taddTrack(){\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\tremoveTrack(){\n\t\tthis.props.onRemove(this.props.track);\n\t\tconsole.log(\"removetrack ran\");\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"Track\">\n\t\t\t  <div className=\"Track-information\">\n\t\t\t    <h3>{this.props.track.name}</h3>\n\t\t\t    <p>{this.props.track.artist} | {this.props.track.album}</p>\n\t\t\t  </div>\n\t\t\t  {this.renderAction()}\n\t\t\t</div>\n\t\t\t)\n\t}\n\n\n}\nexport default Track;","import React from 'react';\nimport Track from '../Track/Track.js'\nimport './TrackList.css'\n\nclass TrackList extends React.Component{\nrender(){\n\treturn (\n\t\t<div className=\"TrackList\">\n\t\t   {\n\t\t   \tthis.props.tracks.map(track =>{\n\t\t   \t\treturn <Track track={track} \n\t\t\t\t\t\t   \t\tkey={track.id} \n\t\t\t\t\t\t   \t\tonAdd={this.props.onAdd}\n\t\t\t\t\t\t   \t\tonRemove={this.props.onRemove}\n\t\t\t\t\t\t   \t\tisRemoval={this.props.isRemoval} />\n\t\t   \t}\n\t\t   \t\t)\n\t\t   \t}\n\t\t   \n\t\t</div>\n\t\t)\n}\n\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css'\nimport TrackList from '../TrackList/TrackList.js'\n\nclass SearchResults extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n\t\t\t  <h2>Results</h2>\n\t\t\t  <TrackList tracks={this.props.SearchResults} \n\t\t\t  \t\t\tonAdd={this.props.onAdd} \n\t\t\t \t\t\tisRemoval={false}/>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList.js';\n\nclass Playlist extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.handleNameChange=this.handleNameChange.bind(this);\n\t}\n\thandleNameChange(e){\n\t\tthis.props.onNameChange(e.target.value);\n\t}\n\trender(){\n\treturn ( \n\t\t<div className=\"Playlist\">\n\t\t  <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n\t\t  {<TrackList tracks={this.props.PlaylistTracks} \n\t\t  \t\t\t\tonRemove={this.props.onRemove}\n\t\t  \t\t\t\tisRemoval={true}/>}\n\t\t  <button className=\"Playlist-save\"onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n\t\t</div>\n\t\t)\n}\n}\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state ={\n      SearchResults:[],\n        PlaylistName:'myplaylist',\n        PlaylistTracks:[]\n    }\n    this.addTrack=this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n  }\n  addTrack(track){\n    let tracks=this.state.PlaylistTracks;\n\n    if(tracks.find(isSaved=> isSaved.id ===track.id)){\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({PlaylistTracks:tracks});\n\n    }\n  }\n  removeTrack(track){\n    let tracks=this.state.PlaylistTracks;\n    tracks=tracks.filter(currentTrack=>currentTrack.id!==track.id);\n    this.setState({PlaylistTracks:tracks});\n  }\n  updatePlaylistName(name){\n    let newname=name;\n    this.setState({PlaylistName:newname});\n  }\n  savePlaylist(){\n    const trackUris=this.state.PlaylistTracks.map(track=> {return track.uri});\n    Spotify.savePlaylist(this.state.PlaylistName, trackUris).then(()=>{\n      this.setState({\n        PlaylistName: 'New Playlist',\n        playlistTracks:[]\n      })\n    })\n  }\n  search(term){\n      Spotify.search(term).then(SearchResults=>{\n        this.setState({SearchResults:SearchResults})\n      })\n    }\n\n  render(){\n    return (\n      <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search}/>\n    <div className=\"App-playlist\">\n    <SearchResults SearchResults={this.state.SearchResults}\n                   onAdd={this.addTrack}/>\n    <Playlist PlaylistName={this.state.PlaylistName}\n              PlaylistTracks={this.state.PlaylistTracks} \n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}/>\n    </div>\n    </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}